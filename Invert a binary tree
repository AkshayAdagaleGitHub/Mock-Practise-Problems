/*
Invert a binary tree.

      1
    2   3
  4  5 6  7


      1
   3     2
7    6 5   4



*/
import java.io.*;

//Node class
class Node {
  int value;
  Node left;
  Node right;

  Node(int value){
    this.value = value;
    this.left = null;
    this.right = null;
  }

}

class MyCode {
	public static void main (String[] args) {
		
    Node root = new Node(1);

    root.left = new Node(2);
    root.right = new Node(3);

    root.left.left = new Node(4);
    root.left.right = new Node(5);

    root.right.left = new Node(6);
    root.right.right = new Node(7);

    System.out.println("Original Tree : ");
    printTree(root);

    invertTree(root);
    
    System.out.println();
    System.out.println("After inteverting : ");
    
    printTree(root);
	}
   
   // Method 1      
  public static Node invertTree(Node root) {
      
      if (root == null) {
         return null;
      }
    
      Node left = invertTree(root.left);
      Node right = invertTree(root.right);
    
      root.left = right;
      root.right = left;
      return root;
}
 
 /*  Method 2
 public static void invertTree2(Node left, Node right){

      if(left == null && right == null){
          return;
      }
      
      if((left != null && right == null) || (left == null && right != null)){
          return;
      }

      int temp = left.value;
      left.value = right.value; 
      right.value = left.value;  
      
      invertTree(left.left, right.left);
      invertTree(left.right, right.left);   
  }
*/

 public static void printTree(Node root){  
      if(root != null){
            System.out.print(" "+root.value);
            printTree(root.left);
            printTree(root.right);
      }
  }

}
